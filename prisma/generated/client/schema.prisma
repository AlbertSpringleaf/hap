// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id           String   @id @default(cuid())
  domain       String   @unique
  name         String
  users        User[]
  pendingUsers User[]   @relation("PendingUsers")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id                    String             @id @default(cuid())
  name                  String?
  email                 String?            @unique
  password              String
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  koopovereenkomsten    Koopovereenkomst[]
  organizationId        String?
  organization          Organization?      @relation(fields: [organizationId], references: [id])
  isAdmin               Boolean            @default(false)
  registrationStatus    String             @default("PENDING") // PENDING, APPROVED, REJECTED
  pendingOrganizationId String?
  pendingOrganization   Organization?      @relation("PendingUsers", fields: [pendingOrganizationId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Koopovereenkomst {
  id           String   @id @default(cuid())
  naam         String
  pdfBase64    String   @db.Text
  jsonData     Json?    @default("{}")
  status       String   @default("PENDING")
  errorMessage String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
